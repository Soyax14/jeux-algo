def create_board():
    return [[0] * COLS for _ in range(ROWS)]

def print_board(board):
    print("\n  " + " ".join(str(c+1) for c in range(COLS)))
    for row in board:
        print(" |" + "|".join(" " if v==0 else ("X" if v==1 else "O") for v in row) + "|")
    print("  " + "--"*COLS)

def drop_piece(board, col, player):
    for r in range(ROWS-1, -1, -1):
        if board[r][col] == 0:
            board[r][col] = player
            return True
    return False

def check_win(board, player):
    dirs = [(0,1),(1,0),(1,1),(-1,1)]
    for r in range(ROWS):
        for c in range(COLS):
            if board[r][c] != player: 
                continue
            for dr, dc in dirs:
                count = 0
                rr, cc = r, c
                while 0 <= rr < ROWS and 0 <= cc < COLS and board[rr][cc] == player:
                    count += 1
                    if count == 4:
                        return True
                    rr += dr
                    cc += dc
    return False

def is_full(board):
    return all(board[0][c] != 0 for c in range(COLS))

def play():
    board = create_board()
    player = 1
    while True:
        print_board(board)
        try:
            col = int(input(f"Joueur {player} ({'X' if player==1 else 'O'}), choisis une colonne (1-{COLS}): ")) - 1
        except ValueError:
            print("EntrÃ©e invalide.")
            continue
        if not 0 <= col < COLS:
            print("Colonne hors limites.")
            continue
        if not drop_piece(board, col, player):
            print("Colonne pleine.")
            continue
        if check_win(board, player):
            print_board(board)
            print(f"ðŸŽ‰ Joueur {player} gagne !")
            break
        if is_full(board):
            print_board(board)
            print("Match nul !")
            break
        player = 2 if player == 1 else 1
